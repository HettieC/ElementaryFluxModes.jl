var documenterSearchIndex = {"docs":
[{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"EditURL = \"1-toy-model.jl\"","category":"page"},{"location":"1-toy-model/#Toy-Model","page":"Toy Model","title":"Toy Model","text":"","category":"section"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"using ElementaryFluxModes\n\nusing LinearAlgebra","category":"page"},{"location":"1-toy-model/#Load-a-simple-model","page":"Toy Model","title":"Load a simple model","text":"","category":"section"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"The code used to construct the model is located in test/simple_model.jl, but it is not shown here for brevity.","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"include(\"../../test/simple_model.jl\"); #hide\n\n\nmodel","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"Get the stoichiometric matrix of the model, this is what we use to find EFMs","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"N = AbstractFBCModels.stoichiometry(model)","category":"page"},{"location":"1-toy-model/#Calculate-the-EFMs","page":"Toy Model","title":"Calculate the EFMs","text":"","category":"section"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"Run the double description algorith on N and K","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"E = get_efms(Matrix(N))","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"If preferred, we can transform the vector of EFMs, E, into a dictionary of reaction => fluxes through the efms","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"EFM_dict = Dict(AbstractFBCModels.reactions(model) .=> eachrow(E))","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"","category":"page"},{"location":"1-toy-model/","page":"Toy Model","title":"Toy Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Standard-DD","page":"Reference","title":"Standard DD","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ElementaryFluxModes]\nPages = [\"src/DDStandard.jl\"]","category":"page"},{"location":"reference/#Binary-DD","page":"Reference","title":"Binary DD","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ElementaryFluxModes]\nPages = [\"src/DDBinary.jl\"]","category":"page"},{"location":"reference/#ElementaryFluxModes.DDBinary-Tuple{Any, Any}","page":"Reference","title":"ElementaryFluxModes.DDBinary","text":"DDBinary(N, K) -> Any\n\n\nImplement the Double Description method in binary form. The input variables are: -N: the stoichiometric matrix with only forward reactions. If any fluxes are fixed     then N has the form [N1 w] where N1 is the stoichiometric matrix for non-fixed fluxes,     and w is the columns of fixed fluxes multiplied by their flux values.\n\n-K: initial nullspace of N, in the form [I;K*] Output: -R: binary elementary flux modes\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.check_adjacency-Tuple{Any, Any, Any}","page":"Reference","title":"ElementaryFluxModes.check_adjacency","text":"check_adjacency(i, j, R) -> Bool\n\n\nCheck adjacency of columns i and j in r by making sure that there exists no other extreme ray in R whose zero set is a superset of the intersection of the zero sets of ray i and ray j.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.get_efms-Tuple{Matrix{Float64}}","page":"Reference","title":"ElementaryFluxModes.get_efms","text":"get_efms(N::Matrix{Float64}; tol) -> Any\n\n\nCalculate elementary flux modes of a stoichiometric matrix. Input N must be the stoichiometric matrix of a network with only  forward reactions. Output: vector of size (n,k) of the fluxes through the n reactions  in the k EFMs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.make_bitmap-Tuple{Any}","page":"Reference","title":"ElementaryFluxModes.make_bitmap","text":"make_bitmap(row) -> Vector{Bool}\n\n\nReturn a bitmap of the input vector, where entries are 1 if the vector entry is greater than zero, and zero if the entries are zero. Return an error if any entries of the vector are less than zero.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.rational_nullspace-Tuple{Matrix}","page":"Reference","title":"ElementaryFluxModes.rational_nullspace","text":"rational_nullspace(\n    A::Matrix;\n    tol\n) -> Tuple{Matrix{Float64}, Any}\n\n\nHelper function to calculate a nullspace of the matrix A, with all rational entries.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.zero_set-Tuple{Any}","page":"Reference","title":"ElementaryFluxModes.zero_set","text":"zero_set(vec) -> Vector\n\n\nReturn the zero set of a vector\n\n\n\n\n\n","category":"method"},{"location":"reference/#Utilities","page":"Reference","title":"Utilities","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ElementaryFluxModes]\nPages = [\"src/utils.jl\"]","category":"page"},{"location":"reference/#ElementaryFluxModes.fix_fluxes-Tuple{Matrix{Float64}, Vector{Int64}, Vector{Float64}}","page":"Reference","title":"ElementaryFluxModes.fix_fluxes","text":"fix_fluxes(\n    S::Matrix{Float64},\n    fixed_fluxes::Vector{Int64},\n    flux_values::Vector{Float64}\n) -> Matrix{Float64}\n\n\nFunction to make a convex polyhedron out of a problem with fixed fluxes. Input:     S: irreversible stoichiometric matrix, aka any reversible reactions have         been split into two irreversible reactions     fixedfluxes: list of indices of the fixed fluxes     fluxvalues: list of fixed flux values in same order as fixedfluxes Output:     Sconvex: stoichiometric matrix with which to implement the DD algorithm Note: results of DDStandard need to be transformed to take into account these     fixed fluxes, using cleanDDresult\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.remove_linearly_dep_rows-Tuple{Matrix{Float64}}","page":"Reference","title":"ElementaryFluxModes.remove_linearly_dep_rows","text":"remove_linearly_dep_rows(\n    A::Matrix{Float64};\n    tol\n) -> Tuple{Matrix{Float64}, Vector{Int64}}\n\n\nHelper function to remove linearly dependent rows of the matrix A.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.reorder_ns-Tuple{Matrix}","page":"Reference","title":"ElementaryFluxModes.reorder_ns","text":"reorder_ns(A::Matrix) -> Tuple{Matrix, Vector{Int64}}\n\n\nHelper function to reorder the rows of the nullspace so that it is in the form [I; K].\n\n\n\n\n\n","category":"method"},{"location":"reference/#ElementaryFluxModes.reversible_EFMs-Tuple{Matrix{Float64}, Vector{Int64}}","page":"Reference","title":"ElementaryFluxModes.reversible_EFMs","text":"reversible_EFMs(\n    E::Matrix{Float64},\n    reversible::Vector{Int64}\n) -> Matrix{Float64}\n\n\nReturn the EFMs in terms of the original stoichiometric matrix, with reversible reactions.\n\n\n\n\n\n","category":"method"},{"location":"#ElementaryFluxModes.jl","page":"README","title":"ElementaryFluxModes.jl","text":"","category":"section"},{"location":"","page":"README","title":"README","text":"Modules = [ElementaryFluxModes]\nPages = [\"src/ElementaryFluxModes.jl\"]","category":"page"},{"location":"#ElementaryFluxModes.ElementaryFluxModes","page":"README","title":"ElementaryFluxModes.ElementaryFluxModes","text":"Package ElementaryFluxModes provides a Julia implementation of the Double Description method to calculate extreme rays of convex polyhedral cones. We follow the method described in Terzer 2009 thesis for the polyhedral cone Ρ = {x ∈ ℜ^d | Ax = 0, x >= 0}.\n\n\n\n\n\n","category":"module"}]
}
